// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ErrorHandling {
    address public owner;
    uint public balance;

    constructor() {
        owner = msg.sender;
        balance = 0;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero.");
        balance += msg.value;
    }

    function withdraw(uint amount) public onlyOwner {
        require(amount <= balance, "Insufficient balance.");
        balance -= amount;
        payable(owner).transfer(amount);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner address cannot be zero.");
        owner = newOwner;
    }

    function triggerAssert() public view {
        // This is just an example, assert should be used to check for conditions that should never be false
        assert(balance >= 0);
    }

    function triggerRevert() public {
        revert("This function always reverts.");
    }

    function safeMathAdd(uint a, uint b) public pure returns (uint) {
        uint c = a + b;
        assert(c >= a); // Overflow check
        return c;
    }
}
